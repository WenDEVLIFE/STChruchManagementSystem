/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import static UI.BookAnEvents.userId;
import database.BookMYSQL;

import javax.swing.*;
import java.awt.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.HashMap;
import java.util.Map;

/**
 *
 * @author Administrator
 */
public class BookAnEvents extends javax.swing.JFrame {
   static int userId;
    /**
     * Creates new form BookAnEvents
     */
    public BookAnEvents(int userId) {
        initComponents();
         BookAnEvents.userId = userId;
                   getContentPane().setBackground(new Color(210, 180, 140));
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(102, 51, 0));
        jLabel2.setText("EVENT TYPE");

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setText("Funeral");
        jButton3.setActionCommand("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 153, 0));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Christening");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(153, 255, 255));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 0));
        jButton4.setText("Wedding");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Back to Main Menu");
        jButton1.setActionCommand("");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(255, 255, 255))
            .addGroup(layout.createSequentialGroup()
                .addGap(74, 74, 74)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(69, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(68, 68, 68)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(133, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
            showFuneral();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
              showChristening();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
              showWedding();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
             UserMainMenu userMainMenu = new UserMainMenu(userId);
        userMainMenu.setVisible(true);
        userMainMenu.setLocationRelativeTo(null);
        this.dispose(); //
    }//GEN-LAST:event_jButton1ActionPerformed


    // This will show the Christening dialog
    void showChristening() {
        // Custom panel with background image
        JPanel backgroundPanel = new JPanel() {
            private final Image backgroundImage = new ImageIcon("src/images/bg_christen.png").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            }
        };
        backgroundPanel.setLayout(new BorderLayout());
        backgroundPanel.setPreferredSize(new Dimension(600, 400));

        // Input panel
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        inputPanel.setOpaque(false);
        inputPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 10, 20)); // spacing

        JTextField nameField = new JTextField();
        JTextField parentNameField = new JTextField();
        JTextField contactField = new JTextField();
        JTextField enterDateField = new JTextField();
        JTextField timeField = new JTextField();

        inputPanel.add(new JLabel("Enter Child's Name:"));
        inputPanel.add(nameField);
        inputPanel.add(new JLabel("Enter Parent's Name:"));
        inputPanel.add(parentNameField);
        inputPanel.add(new JLabel("Enter Contact Number:"));
        inputPanel.add(contactField);
        inputPanel.add(new JLabel("Enter Date (YYYY-MM-DD):"));
        inputPanel.add(enterDateField);
        inputPanel.add(new JLabel("Enter Time Slot:"));
        inputPanel.add(timeField);

        // Button panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        JButton submitButton = new JButton("Submit");
        submitButton.setBackground(new Color(46, 155, 244));
        JButton cancelButton = new JButton("Cancel");

        // orange rgba color
        cancelButton.setBackground(new Color(255, 165, 0, 255)); // Fully opaque orange);
        buttonPanel.add(submitButton);
        buttonPanel.add(cancelButton);

        // Combine input and buttons vertically
        JPanel contentPanel = new JPanel();
        contentPanel.setOpaque(false);
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
        contentPanel.add(inputPanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(buttonPanel);

        backgroundPanel.add(contentPanel, BorderLayout.CENTER);

        // Create dialog
        JDialog dialog = new JDialog((Frame) null, "Enter Christening Details", true);
        dialog.setContentPane(backgroundPanel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);

        // Cancel button closes the dialog
        cancelButton.addActionListener(e -> dialog.dispose());

        // Submit button logic
        submitButton.addActionListener(e -> {
            String childName = nameField.getText().trim();
            String parentName = parentNameField.getText().trim();
            String contactNumber = contactField.getText().trim();
            String date = enterDateField.getText().trim();
            String timeSlot = timeField.getText().trim();

            if (childName.isEmpty() || parentName.isEmpty() || contactNumber.isEmpty() || date.isEmpty() || timeSlot.isEmpty()) {
                JOptionPane.showMessageDialog(dialog, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!contactNumber.matches("\\d+")) {
                JOptionPane.showMessageDialog(dialog, "Please enter a valid phone number (digits only).", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                dateFormat.setLenient(false);
                dateFormat.parse(date);

                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm a");
                LocalTime enteredTime = LocalTime.parse(timeSlot, timeFormatter);
                LocalTime startTime = LocalTime.of(8, 0);
                LocalTime endTime = LocalTime.of(16, 0);

                if (enteredTime.isBefore(startTime) || enteredTime.isAfter(endTime)) {
                    JOptionPane.showMessageDialog(dialog, "Please enter a time between 08:00 AM and 04:00 PM.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Map<String, Object> christeningDetails = new HashMap<>();
                christeningDetails.put("childName", childName);
                christeningDetails.put("parentName", parentName);
                christeningDetails.put("contactNumber", contactNumber);
                christeningDetails.put("date", date);
                christeningDetails.put("timeSlot", timeSlot);
                christeningDetails.put("user_id", userId);

                BookMYSQL.getInstance().insertChristening(christeningDetails, dialog);
                dialog.dispose();

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(dialog, "Invalid date format. Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(dialog, "Invalid time format. Please use hh:mm AM/PM (e.g., 08:30 AM).", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        dialog.setVisible(true);
    }


    // This will show the wedding
    void showWedding() {
        // Custom panel with background image
        JPanel backgroundPanel = new JPanel() {
            private final Image backgroundImage = new ImageIcon("src/images/bgwed.png").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            }
        };
        backgroundPanel.setLayout(new BorderLayout());
        backgroundPanel.setPreferredSize(new Dimension(600, 400));

        // Input panel
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        inputPanel.setOpaque(false);
        inputPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 10, 20));

        JTextField groomField = new JTextField();
        JTextField brideField = new JTextField();
        JTextField contactField = new JTextField();
        JTextField dateField = new JTextField();
        JTextField timeField = new JTextField();

        inputPanel.add(new JLabel("Enter Groom's Name:"));
        inputPanel.add(groomField);
        inputPanel.add(new JLabel("Enter Bride's Name:"));
        inputPanel.add(brideField);
        inputPanel.add(new JLabel("Enter Contact Number:"));
        inputPanel.add(contactField);
        inputPanel.add(new JLabel("Enter Date (YYYY-MM-DD):"));
        inputPanel.add(dateField);
        inputPanel.add(new JLabel("Enter Time Slot (hh:mm AM/PM):"));
        inputPanel.add(timeField);

        // Button panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        JButton submitButton = new JButton("Submit");
        submitButton.setBackground(new Color(46, 155, 244));
        JButton cancelButton = new JButton("Cancel");

        // orange rgba color
        cancelButton.setBackground(new Color(255, 165, 0, 255)); // Fully opaque orange);
        buttonPanel.add(submitButton);
        buttonPanel.add(cancelButton);

        // Combine panels
        JPanel contentPanel = new JPanel();
        contentPanel.setOpaque(false);
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
        contentPanel.add(inputPanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(buttonPanel);

        backgroundPanel.add(contentPanel, BorderLayout.CENTER);

        // Create dialog
        JDialog dialog = new JDialog((Frame) null, "Enter Wedding Details", true);
        dialog.setContentPane(backgroundPanel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);

        // Cancel action
        cancelButton.addActionListener(e -> dialog.dispose());

        // Submit action
        submitButton.addActionListener(e -> {
            String groomName = groomField.getText().trim();
            String brideName = brideField.getText().trim();
            String contactNumber = contactField.getText().trim();
            String date = dateField.getText().trim();
            String timeSlot = timeField.getText().trim();

            if (groomName.isEmpty() || brideName.isEmpty() || contactNumber.isEmpty() || date.isEmpty() || timeSlot.isEmpty()) {
                JOptionPane.showMessageDialog(dialog, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!contactNumber.matches("\\d+")) {
                JOptionPane.showMessageDialog(dialog, "Please enter a valid phone number (digits only).", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                dateFormat.setLenient(false);
                dateFormat.parse(date);

                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm a");
                LocalTime enteredTime = LocalTime.parse(timeSlot, timeFormatter);
                LocalTime startTime = LocalTime.of(8, 0);
                LocalTime endTime = LocalTime.of(16, 0);

                if (enteredTime.isBefore(startTime) || enteredTime.isAfter(endTime)) {
                    JOptionPane.showMessageDialog(dialog, "Please enter a time between 08:00 AM and 04:00 PM.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Map<String, Object> weddingDetails = new HashMap<>();
                weddingDetails.put("groom_name", groomName);
                weddingDetails.put("brides_name", brideName);
                weddingDetails.put("contactNumber", contactNumber);
                weddingDetails.put("date", date);
                weddingDetails.put("timeSlot", timeSlot);
                weddingDetails.put("user_id", userId); // Make sure userId is in scope

                BookMYSQL.getInstance().insertWedding(weddingDetails, dialog);
                dialog.dispose();

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(dialog, "Invalid date format. Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(dialog, "Invalid time format. Please use hh:mm AM/PM (e.g., 08:30 AM).", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Show dialog after listeners are attached
        dialog.setVisible(true);
    }

    // This will show the Funeral dialog
    void showFuneral() {
        // Custom panel with background image
        JPanel backgroundPanel = new JPanel() {
            private final Image backgroundImage = new ImageIcon("src/images/bgfun.png").getImage();

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                g.drawImage(backgroundImage, 0, 0, getWidth(), getHeight(), this);
            }
        };
        backgroundPanel.setLayout(new BorderLayout());
        backgroundPanel.setPreferredSize(new Dimension(600, 400));

        // Input panel
        JPanel inputPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        inputPanel.setOpaque(false);
        inputPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 10, 20));

        JTextField deceasedNameField = new JTextField();
        JTextField familyNameField = new JTextField();
        JTextField contactField = new JTextField();
        JTextField dateField = new JTextField();
        JTextField timeField = new JTextField();

        inputPanel.add(new JLabel("Enter Deceased's Name:"));
        inputPanel.add(deceasedNameField);
        inputPanel.add(new JLabel("Enter Family's Name:"));
        inputPanel.add(familyNameField);
        inputPanel.add(new JLabel("Enter Contact Number:"));
        inputPanel.add(contactField);
        inputPanel.add(new JLabel("Enter Date (YYYY-MM-DD):"));
        inputPanel.add(dateField);
        inputPanel.add(new JLabel("Enter Time Slot (hh:mm AM/PM):"));
        inputPanel.add(timeField);

        // Button panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        buttonPanel.setOpaque(false);
        JButton submitButton = new JButton("Submit");
        submitButton.setBackground(new Color(46, 155, 244));
        JButton cancelButton = new JButton("Cancel");

        // orange rgba color
        cancelButton.setBackground(new Color(255, 165, 0, 255)); // Fully opaque orange);
        buttonPanel.add(submitButton);
        buttonPanel.add(cancelButton);

        // Combine panels
        JPanel contentPanel = new JPanel();
        contentPanel.setOpaque(false);
        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
        contentPanel.setBorder(BorderFactory.createEmptyBorder(30, 30, 30, 30));
        contentPanel.add(inputPanel);
        contentPanel.add(Box.createVerticalStrut(20));
        contentPanel.add(buttonPanel);

        backgroundPanel.add(contentPanel, BorderLayout.CENTER);

        // Create dialog
        JDialog dialog = new JDialog((Frame) null, "Enter Funeral Details", true);
        dialog.setContentPane(backgroundPanel);
        dialog.pack();
        dialog.setLocationRelativeTo(null);

        // Cancel action
        cancelButton.addActionListener(e -> dialog.dispose());

        // Submit action
        submitButton.addActionListener(e -> {
            String deceasedName = deceasedNameField.getText().trim();
            String familyName = familyNameField.getText().trim();
            String contactNumber = contactField.getText().trim();
            String date = dateField.getText().trim();
            String timeSlot = timeField.getText().trim();

            if (deceasedName.isEmpty() || familyName.isEmpty() || contactNumber.isEmpty() || date.isEmpty() || timeSlot.isEmpty()) {
                JOptionPane.showMessageDialog(dialog, "Please fill in all fields.", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            if (!contactNumber.matches("\\d+")) {
                JOptionPane.showMessageDialog(dialog, "Please enter a valid phone number (digits only).", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            try {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                dateFormat.setLenient(false);
                dateFormat.parse(date);

                DateTimeFormatter timeFormatter = DateTimeFormatter.ofPattern("hh:mm a");
                LocalTime enteredTime = LocalTime.parse(timeSlot, timeFormatter);
                LocalTime startTime = LocalTime.of(8, 0);
                LocalTime endTime = LocalTime.of(16, 0);

                if (enteredTime.isBefore(startTime) || enteredTime.isAfter(endTime)) {
                    JOptionPane.showMessageDialog(dialog, "Please enter a time between 08:00 AM and 04:00 PM.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                Map<String, Object> funeralDetails = new HashMap<>();
                funeralDetails.put("deceased_name", deceasedName);
                funeralDetails.put("family_name", familyName);
                funeralDetails.put("contactNumber", contactNumber);
                funeralDetails.put("date", date);
                funeralDetails.put("timeSlot", timeSlot);
                funeralDetails.put("user_id", userId); // Make sure userId is in scope

                BookMYSQL.getInstance().insertFuneral(funeralDetails, dialog);
                dialog.dispose();

            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(dialog, "Invalid date format. Please use YYYY-MM-DD.", "Error", JOptionPane.ERROR_MESSAGE);
            } catch (DateTimeParseException ex) {
                JOptionPane.showMessageDialog(dialog, "Invalid time format. Please use hh:mm AM/PM (e.g., 08:30 AM).", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        // Show dialog after listeners are attached
        dialog.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookAnEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookAnEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookAnEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookAnEvents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookAnEvents(userId).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
